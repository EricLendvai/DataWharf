function Schema()
return ;
{"public.Application"=>{"Fields"=>;
   {"pk"                          =>{,  "I",   0,  0,"+"};
   ,"sysc"                        =>{, "DT",   0,  6,"N"};
   ,"sysm"                        =>{, "DT",   0,  6,"N"};
   ,"LinkCode"                    =>{, "CV",  20,  0,};         // Used to create direct link to the Application for data dic management
   ,"Name"                        =>{, "CV", 200,  0,};
   ,"UseStatus"                   =>{,  "N",   1,  0,,"1"};     // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"                   =>{,  "N",   1,  0,,"1"};     // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Description"                 =>{,  "M",   0,  0,"N"};
   ,"SupportColumns"              =>{,  "M",   0,  0,"N"};      // List of Column Name that are use as support fields.
   ,"AddForeignKeyIndexORMExport" =>{,  "L",   0,  0,};         // Automatically Add Indexes on Integer and Big Integer Foreign Keys during "Export to Harbour_ORM"
   ,"PublishingUseStatus1"        =>{,  "L",   0,  0,};         // If should publish to the public elements with Use Status "Unknown"                  (Upcoming Feature)
   ,"PublishingUseStatus2"        =>{,  "L",   0,  0,};         // If should publish to the public elements with Use Status "Active"                   (Upcoming Feature)
   ,"PublishingUseStatus3"        =>{,  "L",   0,  0,};         // If should publish to the public elements with Use Status "Inactive (Read Only)"     (Upcoming Feature)
   ,"PublishingUseStatus4"        =>{,  "L",   0,  0,};         // If should publish to the public elements with Use Status "Archived"                 (Upcoming Feature)
   ,"DestructiveDelete"           =>{,  "N",   1,  0,,"1"}};    // 1 - None, 2 = On Tables/Tags, 3 = On NameSpaces, 4 = Entire Application Content (Needed to PURGE),5 = Can Delete Application
        ,"Indexes"=>;
   {"LinkCode" =>{,"LinkCode",.f.,"BTREE"}}};
,"public.Deployment"=>{"Fields"=>;
   {"pk"                 =>{,  "I",   0,  0,"+"};
   ,"sysc"               =>{, "DT",   0,  6,"N"};
   ,"sysm"               =>{, "DT",   0,  6,"N"};
   ,"fk_Application"     =>{,  "I",   0,  0,};
   ,"LinkUID"            =>{,  "C",  36,  0,};         // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"               =>{, "CV", 200,  0,};
   ,"Description"        =>{,  "M",   0,  0,"N"};
   ,"Status"             =>{,  "N",   1,  0,,"1"};     // 1 = Active, 2 = On Hold
   ,"BackendType"        =>{,  "N",   1,  0,"N"};      // Connection Info  Backend Type. 1 = MariaDB, 2 = MySQL, 3 = PostgreSQL, 4 = MSSQL
   ,"Server"             =>{, "CV", 200,  0,"N"};      // Connection Info  Server/Host URL/IP.
   ,"Port"               =>{,  "I",   0,  0,"N"};      // Connection Info  Port if not default one for Backend Type.
   ,"User"               =>{, "CV", 200,  0,"N"};      // Connection Info  User Account to use to connect.
   ,"PasswordStorage"    =>{,  "N",   1,  0,"N"};      // Connection Info  Method to store/retrieve password. 1 = Encrypted, 2 = In config.txt, 3 = In Environment Variable, 4 = User is AWS iam account. (Coming Soon)
   ,"PasswordCrypt"      =>{,  "R",   0,  0,"N"};      // Used if PasswordStorage = 1
   ,"PasswordConfigKey"  =>{, "CV", 200,  0,"N"};      // Used if PasswordStorage = 2. Key Name in config.txt
   ,"PasswordEnvVarName" =>{, "CV", 200,  0,"N"};      // Used if PasswordStorage = 3. Name of Environment Variable to use to retrieve password
   ,"Database"           =>{, "CV", 200,  0,"N"};      // Connection Info  Database to connect to.
   ,"NameSpaces"         =>{, "CV", 400,  0,"N"};      // Connection Info  If blank all Name Spaces (PostgreSQL schemas) will be loaded, otherwise list the schema names separated with ","
   ,"SetForeignKey"      =>{,  "N",   1,  0,"N"}};     // Connection Info  1 - Not, 2- Foreign Key Restrictions, 3 - On p_<TableName>, 4 - on fk_<TableName>, 5 - on <TableName>_id
        ,"Indexes"=>;
   {"fk_Application" =>{,"fk_Application"       ,.f.,"BTREE"}}};
,"public.Column"=>{"Fields"=>;
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_Table"       =>{,  "I",   0,  0,};
   ,"fk_TableForeign"=>{,  "I",   0,  0,,"0"};        // Parent Table if this is a foreign key.
   ,"fk_Enumeration" =>{,  "I",   0,  0,,"0"};
   ,"Order"          =>{,  "I",   0,  0,};        // Display Order
   ,"Name"           =>{, "CV", 200,  0,};
   ,"AKA"            =>{, "CV", 200,  0,"N"};     // Used for display only, not in physical implementation.
   ,"UseStatus"      =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"      =>{,  "N",   1,  0,,"1"};    // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Type"           =>{,  "C",   3,  0,};
   ,"Array"          =>{,  "L",   1,  0,};        // Used for PostgreSQL only. Fields can be of an array of types.
   ,"Length"         =>{,  "I",   0,  0,"N"};
   ,"Scale"          =>{,  "I",   0,  0,"N"};
   ,"Nullable"       =>{,  "L",   0,  0,};
   ,"Required"       =>{,  "N",   1,  0,,"1"};       // 0 or 1 - Unknown, 2 = Yes, 3 = No
   ,"Primary"        =>{,  "L",   0,  0,};
   ,"Unicode"        =>{,  "L",   0,  0,};       // Only Applicable to Character types,
   ,"Default"        =>{,  "M",   0,  0,"N"};    // Text version of the default value/expression
   ,"LastNativeType" =>{,  "M",   0,  0,"N"};    // Last Loaded/Synced Column Type from the backend Server
   ,"ForeignKeyUse"  =>{, "CV", 120,  0,"N"};    // Short Description used during Visualization
   ,"Description"    =>{,  "M",   0,  0,"N"};
   ,"UsedBy"         =>{,  "N",   1,  0,,"1"}};      // 1 = All Servers, 2 = MySQL Only, 3 = PostgreSQL Only
        ,"Indexes"=>;
   {"fk_Table"       =>{,"fk_Table"       ,.f.,"BTREE"};
   ,"fk_TableForeign"=>{,"fk_TableForeign",.f.,"BTREE"};
   ,"fk_Enumeration" =>{,"fk_Enumeration" ,.f.,"BTREE"}}};
,"public.Enumeration"=>{"Fields"=>;
   {"pk"              =>{,  "I",   0,  0,"+"};
   ,"sysc"            =>{, "DT",   0,  6,"N"};
   ,"sysm"            =>{, "DT",   0,  6,"N"};
   ,"fk_NameSpace"    =>{,  "I",   0,  0,};
   ,"Name"            =>{, "CV", 200,  0,};
   ,"AKA"             =>{, "CV", 200,  0,"N"};     // Used for display only, not in physical implementation.
   ,"ImplementAs"     =>{,  "N",   1,  0,};        // 1 = Native SQL Enum, 2 = Integer, 3 = Numeric, 4 = Var Char (EnumValue Name)
   ,"ImplementLength" =>{,  "I",   0,  0,"N"};     // Used if ImplementAs is 3 or 4.
   ,"Description"     =>{,  "M",   0,  0,"N"};
   ,"UseStatus"       =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"       =>{,  "N",   1,  0,,"1"}};   // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
        ,"Indexes"=>;
   {"fk_NameSpace"=>{,"fk_NameSpace",.f.,"BTREE"}}};
,"public.EnumValue"=>{"Fields"=>;
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Enumeration"=>{,  "I",   0,  0,};
   ,"Number"        =>{,  "I",   0,  0,"N"};     // Optional. If the enum is not implemented as a Enum SQL type, but more as a pseudo value.
   ,"Order"         =>{,  "I",   0,  0,};        // Display Order
   ,"Name"          =>{, "CV", 200,  0,};
   ,"AKA"           =>{, "CV", 200,  0,"N"};     // Used for display only, not in physical implementation.
   ,"Description"   =>{,  "M",   0,  0,"N"};
   ,"UseStatus"     =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"     =>{,  "N",   1,  0,,"1"}};   // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
        ,"Indexes"=>;
   {"fk_Enumeration"=>{,"fk_Enumeration",.f.,"BTREE"}}};
,"public.Index"=>{"Fields"=>;
   {"pk"         =>{,  "I",   0,  0,"+"};
   ,"sysc"       =>{, "DT",   0,  6,"N"};
   ,"sysm"       =>{, "DT",   0,  6,"N"};
   ,"fk_Table"   =>{,  "I",   0,  0,};
   ,"Name"       =>{, "CV", 200,  0,};
   ,"Unique"     =>{,  "L",   0,  0,};
   ,"Expression" =>{,  "M",   0,  0,"N"};
   ,"Description"=>{,  "M",   0,  0,"N"};
   ,"Algo"       =>{,  "N",   1,  0,};           // 1 = BTREE
   ,"UsedBy"     =>{,  "N",   1,  0,};           // 1 = All Servers, 2 = MySQL Only, 3 = PostgreSQL Only
   ,"UseStatus"  =>{,  "N",   1,  0,,"1"};       // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"  =>{,  "N",   1,  0,,"1"}};      // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
        ,"Indexes"=>;
   {"fk_Table"=>{,"fk_Table",.f.,"BTREE"}}};
,"public.IndexColumn"=>{"Fields"=>;
   {"pk"       =>{,  "I",   0,  0,"+"};
   ,"sysc"     =>{, "DT",   0,  6,"N"};
   ,"sysm"     =>{, "DT",   0,  6,"N"};
   ,"fk_Index" =>{,  "I",   0,  0,};
   ,"fk_Column"=>{,  "I",   0,  0,}};
        ,"Indexes"=>;
   {"fk_Index" =>{,"fk_Index",.f.,"BTREE"};
   ,"fk_Column"=>{,"fk_Column",.f.,"BTREE"}}};
,"public.NameSpace"=>{"Fields"=>;
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Application"=>{,  "I",   0,  0,};
   ,"Name"          =>{, "CV", 200,  0,};
   ,"AKA"           =>{, "CV", 200,  0,"N"};     // Used for display only, not in physical implementation.
   ,"UseStatus"     =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"     =>{,  "N",   1,  0,,"1"};    // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Description"   =>{,  "M",   0,  0,"N"}};
        ,"Indexes"=>;
   {"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.Table"=>{"Fields"=>;
   {"pk"          =>{,  "I",   0,  0,"+"};
   ,"sysc"        =>{, "DT",   0,  6,"N"};
   ,"sysm"        =>{, "DT",   0,  6,"N"};
   ,"fk_NameSpace"=>{,  "I",   0,  0,};
   ,"Name"        =>{, "CV", 200,  0,};
   ,"AKA"         =>{, "CV", 200,  0,"N"};     // Used for display only, not in physical implementation.
   ,"UseStatus"   =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"   =>{,  "N",   1,  0,,"1"};    // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Description" =>{,  "M",   0,  0,"N"};
   ,"Information" =>{,  "M",   0,  0,"N"};     // More any engineering notes.
   ,"Unlogged"    =>{,  "L",   0,  0,}};       // Used for PostgreSQL. Data written to unlogged tables is not written to the write-ahead log, and no replication occurs.
        ,"Indexes"=>;
   {"fk_NameSpace"=>{,"fk_NameSpace",.f.,"BTREE"}}};
,"public.Diagram"=>{"Fields"=>;
   {"pk"                 =>{,  "I",   0,  0,"+"};
   ,"sysc"               =>{, "DT",   0,  6,"N"};
   ,"sysm"               =>{, "DT",   0,  6,"N"};
   ,"fk_Application"     =>{,  "I",   0,  0,};
   ,"Name"               =>{, "CV", 200,  0,};
   ,"LinkUID"            =>{,  "C",  36,  0,};        // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"UseStatus"          =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued _M_ Needed?
   ,"DocStatus"          =>{,  "N",   1,  0,,"1"};    // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete                             _M_ Needed?
   ,"Description"        =>{,  "M",   0,  0,"N"};     //                                                                                        _M_ Needed?
   ,"NodeDisplayMode"    =>{,  "N",   1,  0,};        // 1 = Table Name and Alias, 2 - Table Alias or Name, 3 - Table Name
   ,"NodeShowDescription"=>{,  "L",   0,  0,};        // True If the table description should be included in the node.
   ,"NodeMinHeight"      =>{,  "I",   0,  0,};
   ,"NodeMaxWidth"       =>{,  "I",   0,  0,};
   ,"RenderMode"         =>{,  "N",   1,  0,};        // 1 = VisJs, 2 = mxgraph
   ,"VisPos"             =>{,  "M",   0,  0,"N"};     // Last Visualization Positions for VisJs mode
   ,"MxgPos"             =>{,  "M",   0,  0,"N"}};    // Last Visualization Positions for mxgraph mode
        ,"Indexes"=>;
   {"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.DiagramTable"=>{"Fields"=>;
   {"pk"        =>{,  "I",   0,  0,"+"};
   ,"sysc"      =>{, "DT",   0,  6,"N"};
   ,"sysm"      =>{, "DT",   0,  6,"N"};
   ,"fk_Diagram"=>{,  "I",   0,  0,};
   ,"fk_Table"  =>{,  "I",   0,  0,}};
        ,"Indexes"=>;
   {"fk_Diagram"=>{,"fk_Diagram",.f.,"BTREE"};
   ,"fk_Table"  =>{,"fk_Table"  ,.f.,"BTREE"}}};
,"public.CustomField"=>{"Fields"=>;
   {"pk"                =>{,  "I",   0,  0,"+"};
   ,"sysc"              =>{, "DT",   0,  6,"N"};
   ,"sysm"              =>{, "DT",   0,  6,"N"};
   ,"Code"              =>{, "CV",  10,  0,};
   ,"Name"              =>{, "CV", 200,  0,};       // Must be unique
   ,"Label"             =>{, "CV", 200,  0,};       // Used on Entry screen. Can be the same as long as UsedOn is different or Status is 3.
   ,"Type"              =>{,  "N",   1,  0,};       // 1 - Logical, 2 - Multi Choice, 3 - String, 4 - Text Area, 5 - Date
   ,"OptionDefinition"  =>{,  "M",   0,  0,"N"};    // Used if Type = 2. Row of integer / labels
   ,"Length"            =>{,  "N",   4,  0,"N"};    // Used if Type = 3.
   ,"Width"             =>{,  "N",   3,  0,"N"};    // Used if Type = 4. Width in Characters
   ,"Height"            =>{,  "N",   3,  0,"N"};    // Used if Type = 4. Number of Rows.
   ,"Description"       =>{,  "M",   0,  0,"N"};
   ,"UsedOn"            =>{,  "N",   2,  0,};       // 1 = Application, 2 = Name Space, 3 = Table, 4 = Column, 5 = Model, 6 = Entity, 7 = Association, 8 = Package, 9 = DataType, 10=Attribute
   ,"Status"            =>{,  "N",   1,  0,}};      // 1 = Active, 2 = Inactive (Read Only), 3 = Hidden
        ,"Indexes"=>NIL};
,"public.ApplicationCustomField"=>{"Fields"=>;   // To tell if the record is to be used in an application. The Order will also depend of public.CustomField.UsedOn
   {"pk"               =>{,  "I",   0,  0,"+"};
   ,"sysc"             =>{, "DT",   0,  6,"N"};
   ,"sysm"             =>{, "DT",   0,  6,"N"};
   ,"fk_CustomField"   =>{,  "I",   0,  0,};
   ,"fk_Application"   =>{,  "I",   0,  0,};
   ,"Order"            =>{,  "I",   0,  0,}};       // Display Order
        ,"Indexes"=>;
   {"fk_CustomField"=>{,"fk_CustomField",.f.,"BTREE"};
   ,"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.ProjectCustomField"=>{"Fields"=>;   // To tell if the record is to be used in a Project. The Order will also depend of public.CustomField.UsedOn
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_CustomField"=>{,  "I",   0,  0,};
   ,"fk_Project"    =>{,  "I",   0,  0,};
   ,"Order"         =>{,  "I",   0,  0,}};       // Display Order
        ,"Indexes"=>;
   {"fk_CustomField"=>{,"fk_CustomField",.f.,"BTREE"};
   ,"fk_Project"    =>{,"fk_Project",.f.,"BTREE"}}};
,"public.CustomFieldValue"=>{"Fields"=>;
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_CustomField"=>{,  "I",   0,  0,};
   ,"fk_Entity"     =>{,  "I",   0,  0,};        // Will be the foreign key to Application, NameSpace, Table or Column. See value in public.CustomField.UsedOn
   ,"ValueI"        =>{,  "I",   0,  0,"N"};     // Used if public.CustomField.Type = 2
   ,"ValueM"        =>{,  "M",   0,  0,"N"};     // Used if public.CustomField.Type = 3 or 4
   ,"ValueD"        =>{,  "D",   0,  0,"N"}};    // Used if public.CustomField.Type = 5
        ,"Indexes"=>;
   {"fk_CustomField" =>{,"fk_CustomField",.f.,"BTREE"};
   ,"fk_Entity"      =>{,"fk_Entity"  ,.f.,"BTREE"}}};
,"public.TableMapping"=>{"Fields"=>;
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_TableFrom"   =>{,  "I",   0,  0,};
   ,"fk_TableTo"     =>{,  "I",   0,  0,};
   ,"Description"    =>{,  "M",   0,  0,}};   // Text representation of the value
        ,"Indexes"=>;
   {"fk_TableFrom"   =>{,"fk_TableFrom" ,.f.,"BTREE"};
   ,"fk_TableTo"     =>{,"fk_TableTo"   ,.f.,"BTREE"}}};
,"public.ColumnMapping"=>{"Fields"=>;
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_ColumnFrom"  =>{,  "I",   0,  0,};
   ,"fk_ColumnTo"    =>{,  "I",   0,  0,};
   ,"Description"    =>{,  "M",   0,  0,"N"}};   // Text representation of the value
        ,"Indexes"=>;
   {"fk_ColumnFrom"   =>{,"fk_ColumnFrom" ,.f.,"BTREE"};
   ,"fk_ColumnTo"     =>{,"fk_ColumnTo"   ,.f.,"BTREE"}}};
,"public.Tag"=>{"Fields"=>;
   {"pk"              =>{,  "I",   0,  0,"+"};
   ,"sysc"            =>{, "DT",   0,  6,"N"};
   ,"sysm"            =>{, "DT",   0,  6,"N"};
   ,"fk_Application"  =>{,  "I",   0,  0,};
   ,"Code"            =>{, "CV",  10,  0,};
   ,"Name"            =>{, "CV", 100,  0,};
   ,"TableUseStatus"  =>{,  "N",   1,  0,};     // 1 = Do Not Use, 2 = Active, 3 = Discontinued
   ,"ColumnUseStatus" =>{,  "N",   1,  0,};     // 1 = Do Not Use, 2 = Active, 3 = Discontinued
   ,"Description"     =>{,  "M",   0,  0,"N"}};
        ,"Indexes"=>;
   {"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.TagTable"=>{"Fields"=>;
   {"pk"       =>{,  "I",   0,  0,"+"};
   ,"sysc"     =>{, "DT",   0,  6,"N"};
   ,"sysm"     =>{, "DT",   0,  6,"N"};
   ,"fk_Tag"   =>{,  "I",   0,  0,};
   ,"fk_Table" =>{,  "I",   0,  0,}};
        ,"Indexes"=>;
   {"fk_Tag"   =>{,"fk_Tag"  ,.f.,"BTREE"};
   ,"fk_Table" =>{,"fk_Table",.f.,"BTREE"}}};
,"public.TagColumn"=>{"Fields"=>;
   {"pk"        =>{,  "I",   0,  0,"+"};
   ,"sysc"      =>{, "DT",   0,  6,"N"};
   ,"sysm"      =>{, "DT",   0,  6,"N"};
   ,"fk_Tag"    =>{,  "I",   0,  0,};
   ,"fk_Column" =>{,  "I",   0,  0,}};
        ,"Indexes"=>;
   {"fk_Tag"    =>{,"fk_Tag"   ,.f.,"BTREE"};
   ,"fk_Column" =>{,"fk_Column",.f.,"BTREE"}}};
,"public.Project"=>{"Fields"=>;
   {"pk"                             =>{,  "I",   0,  0,"+"};
   ,"sysc"                           =>{, "DT",   0,  6,"N"};
   ,"sysm"                           =>{, "DT",   0,  6,"N"};
   ,"LinkUID"                        =>{,  "C",  36,  0,};        // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"                           =>{, "CV", 200,  0,};
   ,"UseStatus"                      =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"Description"                    =>{,  "M",   0,  0,"N"};
   ,"DestructiveDelete"              =>{,  "N",   1,  0,,"1"};    // 1 - None, 2 = On Entities/Associations, 3 = Can Delete Models
   ,"AlternateNameForModel"          =>{, "CV",  80,  0,"N"};     // Renaming of Model
   ,"AlternateNameForModels"         =>{, "CV",  80,  0,"N"};     // Renaming of Models
   ,"AlternateNameForEntity"         =>{, "CV",  80,  0,"N"};     // Renaming of Entity
   ,"AlternateNameForEntities"       =>{, "CV",  80,  0,"N"};     // Renaming of Entities
   ,"AlternateNameForAssociation"    =>{, "CV",  80,  0,"N"};     // Renaming of Association
   ,"AlternateNameForAssociations"   =>{, "CV",  80,  0,"N"};     // Renaming of Associations
   ,"AlternateNameForAttribute"      =>{, "CV",  80,  0,"N"};     // Renaming of Property
   ,"AlternateNameForAttributes"     =>{, "CV",  80,  0,"N"};     // Renaming of Properties
   ,"AlternateNameForDataType"       =>{, "CV",  80,  0,"N"};     // Renaming of DataType
   ,"AlternateNameForDataTypes"      =>{, "CV",  80,  0,"N"};     // Renaming of DataTypes
   ,"AlternateNameForPackage"        =>{, "CV",  80,  0,"N"};     // Renaming of Package
   ,"AlternateNameForPackages"       =>{, "CV",  80,  0,"N"};     // Renaming of Packages
   ,"AlternateNameForLinkedEntity"   =>{, "CV",  80,  0,"N"};     // Renaming of LinkedEntity
   ,"AlternateNameForLinkedEntities" =>{, "CV",  80,  0,"N"};     // Renaming of LinkedEntities
   ,"ValidEndpointBoundLowerValues"  =>{,  "M",   0,  0,"N"};     // Association Endpoint List of Valid Bound Lower
   ,"ValidEndpointBoundUpperValues"  =>{,  "M",   0,  0,"N"};     // Association Endpoint List of Valid Bound Upper
   };
        ,"Indexes"=>NIL};
,"public.Model"=>{"Fields"=>;
   {"pk"                    =>{,  "I",   0,  0,"+"};
   ,"sysc"                  =>{, "DT",   0,  6,"N"};
   ,"sysm"                  =>{, "DT",   0,  6,"N"};
   ,"fk_Project"            =>{,  "I",   0,  0,};
   ,"LinkUID"               =>{,  "C",  36,  0,};         // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"                  =>{, "CV", 100,  0,};         // Inique in application
   ,"Stage"                 =>{,  "N",   1,  0,};         // 1 = Proposed, 2 = Draft, 3 = Beta, 4 = Stable, 5 = In Use, 6 = Discontinued
   ,"Description"           =>{,  "M",   0,  0,"N"}};
        ,"Indexes"=>;
   {"fk_Project"=>{,"fk_Project",.f.,"BTREE"}}};
,"public.LinkedModel"=>{"Fields"=>;   // To assist in setting up Entity "Aspect Of" settings
   {"pk"                    =>{,  "I",   0,  0,"+"};
   ,"sysc"                  =>{, "DT",   0,  6,"N"};
   ,"sysm"                  =>{, "DT",   0,  6,"N"};
   ,"fk_Model1"             =>{,  "I",   0,  0,};    // From / To
   ,"fk_Model2"             =>{,  "I",   0,  0,}};   // From / To
        ,"Indexes"=>;
   {"fk_Model1"=>{,"fk_Model1",.f.,"BTREE"};
   ,"fk_Model2"=>{,"fk_Model2",.f.,"BTREE"}}};
,"public.LinkedEntity"=>{"Fields"=>;   // Used for Entity "Aspect Of" settings
   {"pk"                    =>{,  "I",   0,  0,"+"};
   ,"sysc"                  =>{, "DT",   0,  6,"N"};
   ,"sysm"                  =>{, "DT",   0,  6,"N"};
   ,"LinkUID"               =>{,  "C",  36,  0,};     // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Description"           =>{,  "M",   0,  0,"N"};
   ,"fk_Entity1"            =>{,  "I",   0,  0,};    // From / To
   ,"fk_Entity2"            =>{,  "I",   0,  0,}};   // From / To
        ,"Indexes"=>;
   {"fk_Entity1"=>{,"fk_Entity1",.f.,"BTREE"};
   ,"fk_Entity2"=>{,"fk_Entity2",.f.,"BTREE"}}};
,"public.Package"=>{"Fields"=>;
   {"pk"        =>{,  "I",   0,  0,"+"};
   ,"sysc"      =>{, "DT",   0,  6,"N"};
   ,"sysm"      =>{, "DT",   0,  6,"N"};
   ,"fk_Package"=>{,  "I",   0,  0,};
   ,"fk_Model"  =>{,  "I",   0,  0,};
   ,"LinkUID"   =>{,  "C",  36,  0,};        // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"      =>{, "CV", 200,  0,};
   ,"UseStatus" =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"FullName"  =>{,  "M",   0,  0,};        // Denormalized sum of all the parent name. Unique in Model.
   ,"FullPk"    =>{,  "M",   0,  0,};        // Denormalized sum of all the pk fields separated by '*'
   ,"TreeLevel" =>{,  "I",   0,  0,};        // Denormalized Tree dept. Can be used to assist indentation on display.Unique in Model.
   ,"TreeOrder1"=>{,  "I",   0,  0,}};       // Denormalized used to order full list. Unique in Model.
        ,"Indexes"=>;
   {"fk_Package"=>{,"fk_Package",.f.,"BTREE"};
   ,"fk_Model"  =>{,"fk_Model"  ,.f.,"BTREE"}}};
,"public.Entity"=>{"Fields"=>;
   {"pk"              =>{,  "I",   0,  0,"+"};
   ,"sysc"            =>{, "DT",   0,  6,"N"};
   ,"sysm"            =>{, "DT",   0,  6,"N"};
   ,"fk_Model"        =>{,  "I",   0,  0,};
   ,"fk_Package"      =>{,  "I",   0,  0,};        // Optional
   ,"LinkUID"         =>{,  "C",  36,  0,};        // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"            =>{, "CV", 200,  0,};
   ,"UseStatus"       =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"Description"     =>{,  "M",   0,  0,"N"};     // AKA Definition
   ,"Information"     =>{,  "M",   0,  0,"N"}};    // should support mark down (md)
        ,"Indexes"=>;
   {"fk_Model"  =>{,"fk_Model"  ,.f.,"BTREE"};
   ,"fk_Package"=>{,"fk_Package",.f.,"BTREE"}}};
,"public.Association"=>{"Fields"=>;
   {"pk"               =>{,  "I",   0,  0,"+"};
   ,"sysc"             =>{, "DT",   0,  6,"N"};
   ,"sysm"             =>{, "DT",   0,  6,"N"};
   ,"fk_Model"         =>{,  "I",   0,  0,};
   ,"fk_Package"       =>{,  "I",   0,  0,};        // Optional
   ,"LinkUID"          =>{,  "C",  36,  0,};        // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"             =>{, "CV", 200,  0,"N"};     // Display in the middle of the association representation
   ,"UseStatus"        =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"NumberOfEndpoints"=>{,  "N",   2,  0,};        // Must more than 1 and less than 99. This will assist in visualization
   ,"Description"      =>{,  "M",   0,  0,"N"}};    // Meaning of the association. Display when clicking on the association
        ,"Indexes"=>;
   {"fk_Model"  =>{,"fk_Model"  ,.f.,"BTREE"};
   ,"fk_Package"=>{,"fk_Package",.f.,"BTREE"}}};
,"public.Endpoint"=>{"Fields"=>;
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Entity"     =>{,  "I",   0,  0,};
   ,"fk_Association"=>{,  "I",   0,  0,};
   ,"Name"          =>{, "CV", 200,  0,"N"};       // Showing near the entity in a representation
   ,"BoundLower"    =>{, "CV",   4,  0,"N"};
   ,"BoundUpper"    =>{, "CV",   4,  0,"N"};
   ,"IsContainment" =>{,  "L",   0,  0,};          // If should show a diamond.
   ,"Description"   =>{,  "M",   0,  0,"N"}};      // _M_ not certain if needed
        ,"Indexes"=>;
   {"fk_Entity"     =>{,"fk_Entity"     ,.f.,"BTREE"};
   ,"fk_Association"=>{,"fk_Association",.f.,"BTREE"}}};
,"public.Attribute"=>{"Fields"=>;   // should not include foreign keys.
   {"pk"                  =>{,  "I",   0,  0,"+"};
   ,"sysc"                =>{, "DT",   0,  6,"N"};
   ,"sysm"                =>{, "DT",   0,  6,"N"};
   ,"fk_Entity"           =>{,  "I",   0,  0,};
   ,"fk_Attribute"        =>{,  "I",   0,  0,};        // To provide tree-like structure
   ,"fk_DataType"         =>{,  "I",   0,  0,};
   ,"fk_ModelEnumeration" =>{,  "I",   0,  0,};
   ,"LinkUID"             =>{,  "C",  36,  0,};        // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"                =>{, "CV", 200,  0,};
   ,"UseStatus"           =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"BoundLower"          =>{, "CV",   4,  0,"N"};
   ,"BoundUpper"          =>{, "CV",   4,  0,"N"};
   ,"Description"         =>{,  "M",   0,  0,"N"};
   ,"IsObject"            =>{,  "L",   0,  0,};        // Its an nested attribute
   ,"FullName"            =>{,  "M",   0,  0,};        // Denormalized sum of all the parent name. Unique in Entity.
   ,"FullPk"              =>{,  "M",   0,  0,};        // Denormalized sum of all the pk fields separated by '*'
   ,"TreeLevel"           =>{,  "I",   0,  0,};        // Denormalized Tree dept. Can be used to assist indentation on display.Unique in Entity.
   ,"TreeOrder1"          =>{,  "I",   0,  0,}};       // Order full list. Unique in Entity. (NOT Denormalized but actually used and fixed as needed.)
        ,"Indexes"=>;
   {"fk_Attribute"        =>{,"fk_Attribute"        ,.f.,"BTREE"};
   ,"fk_Entity"           =>{,"fk_Entity"           ,.f.,"BTREE"};
   ,"fk_DataType"         =>{,"fk_DataType"         ,.f.,"BTREE"};
   ,"fk_ModelEnumeration" =>{,"fk_ModelEnumeration" ,.f.,"BTREE"}}};
,"public.PrimitiveType"=>{"Fields"=>;   // should not include foreign keys.
   {"pk"         =>{,  "I",   0,  0,"+"};
   ,"sysc"       =>{, "DT",   0,  6,"N"};
   ,"sysm"       =>{, "DT",   0,  6,"N"};
   ,"fk_Project" =>{,  "I",   0,  0,};
   ,"LinkUID"    =>{,  "C",  36,  0,};     // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"       =>{, "CV", 200,  0,};
   ,"Description"=>{,  "M",   0,  0,"N"}};
        ,"Indexes"=>;
   {"fk_Project"=>{,"fk_Project",.f.,"BTREE"}}};
,"public.DataType"=>{"Fields"=>;   // should not include foreign keys.
   {"pk"               =>{,  "I",   0,  0,"+"};
   ,"sysc"             =>{, "DT",   0,  6,"N"};
   ,"sysm"             =>{, "DT",   0,  6,"N"};
   ,"fk_DataType"      =>{,  "I",   0,  0,};
   ,"fk_Model"         =>{,  "I",   0,  0,};
   ,"fk_PrimitiveType" =>{,  "I",   0,  0,};
   ,"LinkUID"          =>{,  "C",  36,  0,};       // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"             =>{, "CV", 200,  0,};
   ,"UseStatus"        =>{,  "N",   1,  0,,"1"};   // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"Description"      =>{,  "M",   0,  0,"N"};
   ,"FullName"         =>{,  "M",   0,  0,};       // Denormalized sum of all the parent name. Unique in Model.
   ,"FullPk"           =>{,  "M",   0,  0,};       // Denormalized sum of all the pk fields separated by '*'
   ,"TreeLevel"        =>{,  "I",   0,  0,};       // Denormalized Tree dept. Can be used to assist indentation on display.Unique in Model.
   ,"TreeOrder1"       =>{,  "I",   0,  0,}};      // Denormalized used to order full list. Unique in Model.
        ,"Indexes"=>;
   {"fk_DataType"     =>{,"fk_DataType"     ,.f.,"BTREE"};
   ,"fk_PrimitiveType"=>{,"fk_PrimitiveType",.f.,"BTREE"};
   ,"fk_Model"        =>{,"fk_Model"        ,.f.,"BTREE"}}};
,"public.ModelEnumeration"=>{"Fields"=>;
   {"pk"              =>{,  "I",   0,  0,"+"};
   ,"sysc"            =>{, "DT",   0,  6,"N"};
   ,"sysm"            =>{, "DT",   0,  6,"N"};
   ,"fk_Model"        =>{,  "I",   0,  0,};
   ,"LinkUID"         =>{,  "C",  36,  0,};        // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"            =>{, "CV", 200,  0,};
   ,"UseStatus"       =>{,  "N",   1,  0,,"1"};  // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"Description"     =>{,  "M",   0,  0,"N"}};
        ,"Indexes"=>;
   {"fk_Model"=>{,"fk_Model",.f.,"BTREE"}}};
,"public.ModelEnumValue"=>{"Fields"=>;
   {"pk"                 =>{,  "I",   0,  0,"+"};
   ,"sysc"               =>{, "DT",   0,  6,"N"};
   ,"sysm"               =>{, "DT",   0,  6,"N"};
   ,"fk_ModelEnumeration"=>{,  "I",   0,  0,};
   ,"Number"             =>{,  "I",   0,  0,"N"};   // Optional. If the enum is not implemented as a Enum SQL type, but more as a pseudo value.
   ,"Order"              =>{,  "I",   0,  0,};      // Display Order
   ,"Name"               =>{, "CV", 200,  0,};
   ,"Description"        =>{,  "M",   0,  0,"N"}};
        ,"Indexes"=>;
   {"fk_ModelEnumeration"=>{,"fk_ModelEnumeration",.f.,"BTREE"}}};
,"public.AssociationTableMapping"=>{"Fields"=>;
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Association"=>{,  "I",   0,  0,};
   ,"fk_Table"      =>{,  "I",   0,  0,}};   // Text representation of the value
        ,"Indexes"=>;
   {"fk_Association"=>{,"fk_Association",.f.,"BTREE"};
   ,"fk_Table"      =>{,"fk_Table"      ,.f.,"BTREE"}}};
,"public.EntityTableMapping"=>{"Fields"=>;
   {"pk"       =>{,  "I",   0,  0,"+"};
   ,"sysc"     =>{, "DT",   0,  6,"N"};
   ,"sysm"     =>{, "DT",   0,  6,"N"};
   ,"fk_Entity"=>{,  "I",   0,  0,};
   ,"fk_Table" =>{,  "I",   0,  0,}};   // Text representation of the value
        ,"Indexes"=>;
   {"fk_Entity"=>{,"fk_Entity",.f.,"BTREE"};
   ,"fk_Table" =>{,"fk_Table" ,.f.,"BTREE"}}};
,"public.AttributeColumnMapping"=>{"Fields"=>;
   {"pk"          =>{,  "I",   0,  0,"+"};
   ,"sysc"        =>{, "DT",   0,  6,"N"};
   ,"sysm"        =>{, "DT",   0,  6,"N"};
   ,"fk_Attribute"=>{,  "I",   0,  0,};
   ,"fk_Column"   =>{,  "I",   0,  0,}};   // Text representation of the value
        ,"Indexes"=>;
   {"fk_Attribute"=>{,"fk_Attribute",.f.,"BTREE"};
   ,"fk_Column"   =>{,"fk_Column"   ,.f.,"BTREE"}}};
,"public.ModelingDiagram"=>{"Fields"=>;
   {"pk"                    =>{,  "I",   0,  0,"+"};
   ,"sysc"                  =>{, "DT",   0,  6,"N"};
   ,"sysm"                  =>{, "DT",   0,  6,"N"};
   ,"fk_Model"              =>{,  "I",   0,  0,};
   ,"Name"                  =>{, "CV", 200,  0,};
   ,"UseStatus"             =>{,  "N",   1,  0,,"1"};      // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"LinkUID"               =>{,  "C",  36,  0,};          // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"NodeShowDescription"   =>{,  "L",   0,  0,};          // True If the node description should be included.
   ,"AssociationShowName"   =>{,  "L",   0,  0,};          // True If the association name should be shown.
   ,"AssociationEndShowName"=>{,  "L",   0,  0,};          // True If the association end name should be shown.
   ,"NodeMinHeight"         =>{,  "I",   0,  0,};
   ,"NodeMaxWidth"          =>{,  "I",   0,  0,};
   ,"VisPos"                =>{,  "M",   0,  0,"N"}};      // Last Visualization Positions
        ,"Indexes"=>;
   {"fk_Model"=>{,"fk_Model",.f.,"BTREE"}}};
,"public.DiagramEntity"=>{"Fields"=>;
   {"pk"                =>{,  "I",   0,  0,"+"};
   ,"sysc"              =>{, "DT",   0,  6,"N"};
   ,"sysm"              =>{, "DT",   0,  6,"N"};
   ,"fk_ModelingDiagram"=>{,  "I",   0,  0,};
   ,"fk_Entity"         =>{,  "I",   0,  0,}};
        ,"Indexes"=>;
   {"fk_ModelingDiagram"=>{,"fk_ModelingDiagram",.f.,"BTREE"};
   ,"fk_Entity"         =>{,"fk_Entity"         ,.f.,"BTREE"}}};
,"public.FastCGIRunLog"  =>{"Fields"=>;
   {"pk"                 =>{,  "I",   0,  0,"+"};
   ,"sysc"               =>{, "DT",   0,  6,"N"};
   ,"sysm"               =>{, "DT",   0,  6,"N"};
   ,"dati"               =>{, "DT",   0,  0,};      // First Request time
   ,"RequestCount"       =>{,  "I",   0,  0,};
   ,"ErrorInfo"          =>{,  "M",   0,  0,"N"};   // Error Info on Crash
   ,"ApplicationVersion" =>{, "CV", 100,  0,};
   ,"IP"                 =>{, "CV",  36,  0,};      //In case using IP6
   ,"OSInfo"             =>{,  "M",   0,  0,"N"};
   ,"HostInfo"           =>{,  "M",   0,  0,"N"}};
        ,"Indexes"=>NIL};
,"public.User"=>{"Fields"=>;
   {"pk"          =>{,  "I",   0,  0,"+"};
   ,"sysc"        =>{, "DT",   0,  6,"N"};
   ,"sysm"        =>{, "DT",   0,  6,"N"};
   ,"id"          =>{, "CV", 100,  0,}; 
   ,"Password"    =>{, "CV", 200,  0,"N"};   // Allow Nul so to set a password to default.
   ,"FirstName"   =>{, "CV", 200,  0,};
   ,"LastName"    =>{, "CV", 200,  0,};
   ,"AccessMode"  =>{,  "N",   1,  0,};      // 1 = Project and Application Specific, 2 = All Projects and Applications Read Only, 3 = All Projects and Applications Full Access, 4 = Root Admin (User Control)
   ,"Status"      =>{,  "N",   1,  0,};      // 1 = Active, 2 = Inactive
   ,"Description" =>{,  "M",   0,  0,"N"}};
        ,"Indexes"=>NIL};
,"public.UserAccessApplication"=>{"Fields"=>;
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_User"        =>{,  "I",   0,  0,};
   ,"fk_Application" =>{,  "I",   0,  0,};
   ,"AccessLevelDD"  =>{,  "N",   1,  0,}};      // Data Dictionary Access Level: 1 - None,2 - Read Only,3 - Edit Description and Information Entries,4 - Edit Description and Information Entries and Diagrams,5 - Edit Anything and Import/Export,6 - Edit Anything and Sync Schema,7 - Full Access
        ,"Indexes"=>;
   {"fk_User"       =>{,"fk_User" ,.f.,"BTREE"};
   ,"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.UserAccessProject"=>{"Fields"=>;
   {"pk"           =>{,  "I",   0,  0,"+"};
   ,"sysc"         =>{, "DT",   0,  6,"N"};
   ,"sysm"         =>{, "DT",   0,  6,"N"};
   ,"fk_User"      =>{,  "I",   0,  0,};
   ,"fk_Project"   =>{,  "I",   0,  0,};
   ,"AccessLevelML"=>{,  "N",   1,  0,}};       // Modeling        Access Level: 1 - None,2 - Read Only,3 - Edit Description and Information Entries,4 - Edit Description and Information Entries and Diagrams,5 - Edit Anything,                                      ,7 - Full Access
        ,"Indexes"=>;
   {"fk_User"   =>{,"fk_User" ,.f.,"BTREE"};
   ,"fk_Project"=>{,"fk_Project",.f.,"BTREE"}}};
,"public.UserSetting"=>{"Fields"=>;
   {"pk"                 =>{,  "I",   0,  0,"+"};
   ,"sysc"               =>{, "DT",   0,  6,"N"};
   ,"sysm"               =>{, "DT",   0,  6,"N"};
   ,"fk_User"            =>{,  "I",   0,  0,};
   ,"fk_Diagram"         =>{,  "I",   0,  0,};
   ,"fk_ModelingDiagram" =>{,  "I",   0,  0,};
   ,"KeyC"               =>{, "CV", 100,  0,};         // Any Text that will be know in the app
   ,"ValueC"             =>{,  "M",   0,  0,};         // Text representation of the value
   ,"ValueType"          =>{,  "N",   1,  0,,"1"}};    // 1 - String, 2 - Integer, 3 - Date, 4 - Blob (Memo)
        ,"Indexes"=>;
   {"fk_User"            =>{,"fk_User"    ,.f.,"BTREE"};
   ,"fk_Diagram"         =>{,"fk_Diagram" ,.f.,"BTREE"};
   ,"fk_ModelingDiagram" =>{,"fk_Diagram" ,.f.,"BTREE"};
   ,"KeyC"               =>{,"KeyC"       ,.f.,"BTREE"}}};
,"public.APIToken"=>{"Fields"=>;
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"LinkUID"        =>{,  "C",  36,  0,};     // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"           =>{, "CV", 200,  0,};     // Used on List of APIToken
   ,"Key"            =>{, "CV", 100,  0,};     // TokenKey
   ,"Description"    =>{,  "M",   0,  0,"N"};  // Use Info (Visible to Assigned User)
   ,"AccessMode"     =>{,  "N",   1,  0,};     // Used if Type = 1. 1 = Project and Application Specific, 2 = All Projects and Applications Read Only, 3 = All Projects and Applications Full Access
   ,"Status"         =>{,  "N",   1,  0,}};    // 1 = Active, 2 = Inactive
        ,"Indexes"=>;
   {"Key"     =>{,"Key" ,.f.,"BTREE"}}};
,"public.APIEndpoint"=>{"Fields"=>;   // Automatically set by DataWharf based on "api.txt" hash array.
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"Name"           =>{, "CV", 200,  0,};      // List of keys of p_APIs hash property
   ,"Status"         =>{,  "N",   1,  0,}};     // 1 - Active, 2 - Inactive/Removed
        ,"Indexes"=>;
   {"Name"       =>{,"Name" ,.f.,"BTREE"}}};
,"public.APIAccessEndpoint"=>{"Fields"=>;   // List of Endpoint a token may access
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_APIToken"    =>{,  "I",   0,  0,};
   ,"fk_APIEndpoint" =>{,  "I",   0,  0,}};
        ,"Indexes"=>;
   {"fk_APIToken"    =>{,"fk_APIToken"    ,.f.,"BTREE"};
   ,"fk_APIEndpoint" =>{,"fk_APIEndpoint" ,.f.,"BTREE"}}};
,"public.APITokenAccessApplication"=>{"Fields"=>;   // Used if related APIToken.Type = 1
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_APIToken"    =>{,  "I",   0,  0,};
   ,"fk_Application" =>{,  "I",   0,  0,};
   ,"AccessLevelDD"  =>{,  "N",   1,  0,}};      // Data Dictionary Access Level: 1 - None,2 - Read Only,3 - Update Description and Information Entries,4 - Update Description and Information Entries and Diagrams,5 - Update Anything and Import/Export,6 - Update Anything and Sync Schema
        ,"Indexes"=>;
   {"fk_APIToken"       =>{,"fk_APIToken" ,.f.,"BTREE"};
   ,"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.APITokenAccessProject"=>{"Fields"=>;   // Used if related APIToken.Type = 1
   {"pk"           =>{,  "I",   0,  0,"+"};
   ,"sysc"         =>{, "DT",   0,  6,"N"};
   ,"sysm"         =>{, "DT",   0,  6,"N"};
   ,"fk_APIToken"  =>{,  "I",   0,  0,};
   ,"fk_Project"   =>{,  "I",   0,  0,};
   ,"AccessLevelML"=>{,  "N",   1,  0,}};       // Modeling        Access Level: 1 - None,2 - Read Only,3 - Update Description and Information Entries,4 - Update Description and Information Entries and Diagrams,5 - Update Anything
        ,"Indexes"=>;
   {"fk_APIToken" =>{,"fk_APIToken" ,.f.,"BTREE"};
   ,"fk_Project"  =>{,"fk_Project",.f.,"BTREE"}}};
,"public.LoginLogs"=>{"Fields"=>;
   {"pk"          =>{,  "I",   0,  0,"+"};
   ,"sysc"        =>{, "DT",   0,  6,"N"};
   ,"sysm"        =>{, "DT",   0,  6,"N"};
   ,"fk_User"     =>{,  "I",   0,  0,};
   ,"TimeIn"      =>{, "DT",   0,  2,};
   ,"TimeOut"     =>{, "DT",   0,  2,"N"};
   ,"IP"          =>{, "CV",  45,  0,};
   ,"Signature"   =>{, "CV",  50,  0,};     //Used To Verify the who is logged in
   ,"Attempts"    =>{,  "I",   0,  0,};
   ,"Status"      =>{,  "N",   1,  0,}};    // 1 = Logged In, 2 = User Logout, 3 = Implicit Logout
        ,"Indexes"=>;
   {"fk_User"=>{,"fk_User",.f.,"BTREE"}}};
,"public.UserSettingApplication"=>{"Fields"=>;
   {"pk"               =>{,  "I",   0,  0,"+"};
   ,"sysc"             =>{, "DT",   0,  6,"N"};
   ,"sysm"             =>{, "DT",   0,  6,"N"};
   ,"fk_User"          =>{,  "I",   0,  0,};
   ,"fk_Application"   =>{,  "I",   0,  0,};
   ,"fk_Diagram"       =>{,  "I",   0,  0,};         // Last selected Application
   ,"fk_Deployment"    =>{,  "I",   0,  0,};         // Last selected Deployment
   ,"SyncBackendType"  =>{,  "N",   1,  0,"N"};      // Connection Info To Sync To.  Backend Type. 1 = MariaDB, 2 = MySQL, 3 = PostgreSQL, 4 = MSSQL
   ,"SyncServer"       =>{, "CV", 200,  0,"N"};      // Connection Info To Sync To.  Server/Host URL/IP.
   ,"SyncPort"         =>{,  "I",   0,  0,"N"};      // Connection Info To Sync To.  Port if not default one for Backend Type.
   ,"SyncUser"         =>{, "CV", 200,  0,"N"};      // Connection Info To Sync To.  User Account to use to connect.
   ,"SyncDatabase"     =>{, "CV", 200,  0,"N"};      // Connection Info To Sync To.  Database to connect to.
   ,"SyncNameSpaces"   =>{, "CV", 400,  0,"N"};      // Connection Info To Sync To.  If blank all Name Spaces (PostgreSQL schemas) will be loaded, otherwise list the schema names separated with ","
   ,"SyncSetForeignKey"=>{,  "N",   1,  0,"N"};      // Connection Info To Sync To.  1 - Not, 2- Foreign Key Restrictions, 3 - On p_<TableName>, 4 - on fk_<TableName>, 5 - on <TableName>_id
   };      //  Last Accessed Diagram, to help default the menu to restart on that diagram.
        ,"Indexes"=>;
   {"fk_User"       =>{,"fk_User"       ,.f.,"BTREE"};
   ,"fk_Application"=>{,"fk_Application",.f.,"BTREE"};
   ,"fk_Deployment" =>{,"fk_Deployment" ,.f.,"BTREE"};
   ,"fk_Diagram"    =>{,"fk_Diagram"    ,.f.,"BTREE"}}};
,"public.UserSettingModel"=>{"Fields"=>;
   {"pk"                 =>{,  "I",   0,  0,"+"};
   ,"sysc"               =>{, "DT",   0,  6,"N"};
   ,"sysm"               =>{, "DT",   0,  6,"N"};
   ,"fk_User"            =>{,  "I",   0,  0,};
   ,"fk_Model"           =>{,  "I",   0,  0,};
   ,"fk_ModelingDiagram" =>{,  "I",   0,  0,}};      //  Last Accessed Diagram, to help default the menu to restart on that diagram.
        ,"Indexes"=>;
   {"fk_User"            =>{,"fk_User"           ,.f.,"BTREE"};
   ,"fk_Model"           =>{,"fk_Model"          ,.f.,"BTREE"};
   ,"fk_ModelingDiagram" =>{,"fk_ModelingDiagram",.f.,"BTREE"}}};
,"volatile.FileStream"=>{"Fields"=>;
   {"pk"                 =>{,  "I",   0,  0,"+"};
   ,"sysc"               =>{, "DT",   0,  6,"N"};
   ,"sysm"               =>{, "DT",   0,  6,"N"};
   ,"type"               =>{,  "I",   0,  6,"N"};      // 1 = Application Export, 2 = Application Import, 3 = Model Export, 4 = Model Import, 5 = Table Export
   ,"fk_User"            =>{,  "I",   0,  0,};
   ,"fk_Application"     =>{,  "I",   0,  0,"N"};
   ,"fk_Table"           =>{,  "I",   0,  0,"N"};
   ,"fk_Model"           =>{,  "I",   0,  0,"N"};
   ,"LinkUID"            =>{,  "C",  36,  0,};
   ,"oid"                =>{,"OID",   0,  0,"N"};     // To the PostgreSQL Large Object;
   ,"FileName"           =>{, "CV", 200,  0,"N"}};
        ,"Indexes"=>;
   {"fk_User"            =>{,"fk_User"       ,.f.,"BTREE"};
   ,"fk_Application"     =>{,"fk_Application",.f.,"BTREE"};
   ,"fk_Table"           =>{,"fk_Application",.f.,"BTREE"};
   ,"fk_Model"           =>{,"fk_Model"      ,.f.,"BTREE"}}};
,"public.TemplateTable"=>{"Fields"=>;
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_Application" =>{,  "I",   0,  0,};
   ,"Name"           =>{, "CV", 200,  0,}};
        ,"Indexes"=>;
   {"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.TemplateColumn"=>{"Fields"=>;
   {"pk"               =>{,  "I",   0,  0,"+"};
   ,"sysc"             =>{, "DT",   0,  6,"N"};
   ,"sysm"             =>{, "DT",   0,  6,"N"};
   ,"fk_TemplateTable" =>{,  "I",   0,  0,};
   ,"Order"            =>{,  "I",   0,  0,};        // Display Order
   ,"Name"             =>{, "CV", 200,  0,};
   ,"AKA"              =>{, "CV", 200,  0,"N"};     // Used for display only, not in physical implementation.
   ,"UseStatus"        =>{,  "N",   1,  0,,"1"};    // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"        =>{,  "N",   1,  0,,"1"};    // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Type"             =>{,  "C",   3,  0,};        // Unlike Column table no support to enumerations, since those are NameSpace specific
   ,"Array"            =>{,  "L",   1,  0,};        // Used for PostgreSQL only. Fields can be of an array of types.
   ,"Length"           =>{,  "I",   0,  0,"N"};
   ,"Scale"            =>{,  "I",   0,  0,"N"};
   ,"Nullable"         =>{,  "L",   0,  0,};
   ,"Required"         =>{,  "N",   1,  0,};       // 0 or 1 - Unknown, 2 = Yes, 3 = No
   ,"Primary"          =>{,  "L",   0,  0,};
   ,"Unicode"          =>{,  "L",   0,  0,};       // Only Applicable to Character types,
   ,"Default"          =>{,  "M",   0,  0,"N"};    // Text version of the default value/expression
   ,"Description"      =>{,  "M",   0,  0,"N"};
   ,"UsedBy"           =>{,  "N",   1,  0,}};      // 1 = All Servers, 2 = MySQL Only, 3 = PostgreSQL Only
        ,"Indexes"=>;
   {"fk_TemplateTable" =>{,"fk_TemplateTable",.f.,"BTREE"}}};
}
