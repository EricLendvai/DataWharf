l_Schema := ;
{"public.Application"=>{;   //Field Definition
   {"pk"                    =>{,  "I",   0,  0,"+"};
   ,"sysc"                  =>{, "DT",   0,  6,"N"};
   ,"sysm"                  =>{, "DT",   0,  6,"N"};
   ,"LinkCode"              =>{, "CV",  10,  0,};     // Used to create direct link to the Application for data dic management
   ,"Name"                  =>{, "CV", 200,  0,};
   ,"UseStatus"             =>{,  "N",   1,  0,};     // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"             =>{,  "N",   1,  0,};     // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Description"           =>{,  "M",   0,  0,"N"};
   ,"SupportColumns"        =>{,  "M",   0,  0,"N"};  // List of Column Name that are use as support fields.
   ,"PublishingUseStatus1"  =>{,  "L",   0,  0,};     // If should publish to the public elements with Use Status "Unknown"
   ,"PublishingUseStatus2"  =>{,  "L",   0,  0,};     // If should publish to the public elements with Use Status "Active"
   ,"PublishingUseStatus3"  =>{,  "L",   0,  0,};     // If should publish to the public elements with Use Status "Inactive (Read Only)"
   ,"PublishingUseStatus4"  =>{,  "L",   0,  0,};     // If should publish to the public elements with Use Status "Archived"
   ,"AllowDestructiveDelete"=>{,  "L",   0,  0,};     // If true can delete entire tables and even entire application. For now has to be set outside of UI.
   ,"SyncBackendType"       =>{,  "N",   1,  0,"N"};  // Connection Info To Sync To.  Backend Type. 1 = MariaDB, 2 = MySQL, 3 = PostgreSQL, 4 = MSSQL
   ,"SyncServer"            =>{, "CV", 200,  0,"N"};  // Connection Info To Sync To.  Server/Host URL/IP.
   ,"SyncPort"              =>{,  "I",   0,  0,"N"};  // Connection Info To Sync To.  Port if not default one for Backend Type.
   ,"SyncUser"              =>{, "CV", 200,  0,"N"};  // Connection Info To Sync To.  User Account to use to connect.
   ,"SyncDatabase"          =>{, "CV", 200,  0,"N"};  // Connection Info To Sync To.  Database to connect to.
   ,"SyncNameSpaces"        =>{, "CV", 400,  0,"N"};  // Connection Info To Sync To.  If blank all Name Spaces (PostgreSQL schemas) will be loaded, otherwise list the schema names separated with ","
   ,"SyncSetForeignKey"     =>{,  "N",   1,  0,"N"};  // Connection Info To Sync To.  1 - Not, 2- Foreign Key Restrictions, 3 - On p_<TableName>, 4 - on fk_<TableName>
   };
   ,;   //Index Definition
   NIL};
,"public.Column"=>{;   //Field Definition
   {"pk"             =>{,  "I",   0,  0,"+"};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_Table"       =>{,  "I",   0,  0,};
   ,"fk_TableForeign"=>{,  "I",   0,  0,"N"};
   ,"fk_Enumeration" =>{,  "I",   0,  0,"N"};
   ,"Order"          =>{,  "I",   0,  0,};      // Display Order
   ,"Name"           =>{, "CV", 200,  0,};
   ,"AKA"            =>{, "CV", 200,  0,"N"};   // Used for display only, not in physical implementation.
   ,"UseStatus"      =>{,  "N",   1,  0,};      // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"      =>{,  "N",   1,  0,};      // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Type"           =>{,  "C",   3,  0,};
   ,"Length"         =>{,  "I",   0,  0,"N"};
   ,"Scale"          =>{,  "I",   0,  0,"N"};
   ,"Nullable"       =>{,  "L",   0,  0,};
   ,"Required"       =>{,  "N",   1,  0,};       // 0 or 1 - Unknown, 2 = Yes, 3 = No
   ,"Primary"        =>{,  "L",   0,  0,};
   ,"Unicode"        =>{,  "L",   0,  0,};     // Only Applicable to Character types,
   ,"Default"        =>{,  "M",   0,  0,"N"};  // Text version of the default value/expression
   ,"LastNativeType" =>{,  "M",   0,  0,"N"};  // Last Loaded/Synced Column Type from the backend Server
   ,"Description"    =>{,  "M",   0,  0,"N"};
   ,"UsedBy"         =>{,  "N",   1,  0,}};     // 1 = All Servers, 2 = MySQL Only, 3 = PostgreSQL Only
   ,;   //Index Definition
   {"fk_Table"       =>{,"fk_Table"       ,.f.,"BTREE"};
   ,"fk_TableForeign"=>{,"fk_TableForeign",.f.,"BTREE"};
   ,"fk_Enumeration" =>{,"fk_Enumeration" ,.f.,"BTREE"}}};
,"public.Enumeration"=>{;   //Field Definition
   {"pk"              =>{,  "I",   0,  0,"+"};
   ,"sysc"            =>{, "DT",   0,  6,"N"};
   ,"sysm"            =>{, "DT",   0,  6,"N"};
   ,"fk_NameSpace"    =>{,  "I",   0,  0,};
   ,"Name"            =>{, "CV", 200,  0,};
   ,"AKA"             =>{, "CV", 200,  0,"N"};   // Used for display only, not in physical implementation.
   ,"ImplementAs"     =>{,  "N",   1,  0,};      // 1 = Native SQL Enum, 2 = Integer, 3 = Numeric, 4 = Var Char (EnumValue Name)
   ,"ImplementLength" =>{,  "I",   0,  0,"N"};   // Used if ImplementAs is 3 or 4.
   ,"Description"     =>{,  "M",   0,  0,"N"};
   ,"UseStatus"       =>{,  "N",   1,  0,};      // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"       =>{,  "N",   1,  0,}};     // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,;   //Index Definition
   {"fk_NameSpace"=>{,"fk_NameSpace",.f.,"BTREE"}}};
,"public.EnumValue"=>{;   //Field Definition
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Enumeration"=>{,  "I",   0,  0,};
   ,"Number"        =>{,  "I",   0,  0,"N"};   // Optional. If the enum is not implemented as a Enum SQL type, but more as a pseudo value.
   ,"Order"         =>{,  "I",   0,  0,};      // Display Order
   ,"Name"          =>{, "CV", 200,  0,};
   ,"AKA"           =>{, "CV", 200,  0,"N"};   // Used for display only, not in physical implementation.
   ,"Description"   =>{,  "M",   0,  0,"N"};
   ,"UseStatus"     =>{,  "N",   1,  0,};      // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"     =>{,  "N",   1,  0,}};     // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,;   //Index Definition
   {"fk_Enumeration"=>{,"fk_Enumeration",.f.,"BTREE"}}};
,"public.Index"=>{;   //Field Definition
   {"pk"         =>{,  "I",   0,  0,"+"};
   ,"sysc"       =>{, "DT",   0,  6,"N"};
   ,"sysm"       =>{, "DT",   0,  6,"N"};
   ,"fk_Table"   =>{,  "I",   0,  0,};
   ,"Name"       =>{, "CV", 200,  0,};
   ,"Unique"     =>{,  "L",   0,  0,};
   ,"Expression" =>{,  "M",   0,  0,"N"};
   ,"Description"=>{,  "M",   0,  0,"N"};
   ,"Algo"       =>{,  "N",   1,  0,};         // 1 = BTREE
   ,"UsedBy"     =>{,  "N",   1,  0,};         // 1 = All Servers, 2 = MySQL Only, 3 = PostgreSQL Only
   ,"UseStatus"  =>{,  "N",   1,  0,};         // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"  =>{,  "N",   1,  0,}};        // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,;   //Index Definition
   {"fk_Table"=>{,"fk_Table",.f.,"BTREE"}}};
,"public.IndexColumn"=>{;   //Field Definition
   {"pk"       =>{,  "I",   0,  0,};
   ,"sysc"     =>{, "DT",   0,  6,"N"};
   ,"sysm"     =>{, "DT",   0,  6,"N"};
   ,"fk_Index" =>{,  "I",   0,  0,};
   ,"fk_Column"=>{,  "I",   0,  0,}};
   ,;   //Index Definition
   {"fk_Index" =>{,"fk_Index",.f.,"BTREE"};
   ,"fk_Column"=>{,"fk_Column",.f.,"BTREE"}}};
,"public.NameSpace"=>{;   //Field Definition
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Application"=>{,  "I",   0,  0,};
   ,"Name"          =>{, "CV", 200,  0,};
   ,"AKA"           =>{, "CV", 200,  0,"N"};   // Used for display only, not in physical implementation.
   ,"UseStatus"     =>{,  "N",   1,  0,};      // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"     =>{,  "N",   1,  0,};      // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Description"   =>{,  "M",   0,  0,"N"}};
   ,;   //Index Definition
   {"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.Table"=>{;   //Field Definition
   {"pk"          =>{,  "I",   0,  0,};
   ,"sysc"        =>{, "DT",   0,  6,"N"};
   ,"sysm"        =>{, "DT",   0,  6,"N"};
   ,"fk_NameSpace"=>{,  "I",   0,  0,"N"};
   ,"Name"        =>{, "CV", 200,  0,};
   ,"AKA"         =>{, "CV", 200,  0,"N"};   // Used for display only, not in physical implementation.
   ,"UseStatus"   =>{,  "N",   1,  0,};      // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"   =>{,  "N",   1,  0,};      // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Description" =>{,  "M",   0,  0,"N"};
   ,"Information" =>{,  "M",   0,  0,"N"}};  // More any engineering notes.
   ,;   //Index Definition
   {"fk_NameSpace"=>{,"fk_NameSpace",.f.,"BTREE"}}};
,"public.Version"=>{;   //Field Definition
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Application"=>{,  "I",   0,  0,};
   ,"Code"          =>{, "CV",  20,  0,};
   ,"UseStatus"     =>{,  "N",   1,  0,};     // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued
   ,"DocStatus"     =>{,  "N",   1,  0,};     // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete
   ,"Description"   =>{,  "M",   0,  0,"N"}};
   ,;   //Index Definition
   {"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.Diagram"=>{;   //Field Definition
   {"pk"                 =>{,  "I",   0,  0,"+"};
   ,"sysc"               =>{, "DT",   0,  6,"N"};
   ,"sysm"               =>{, "DT",   0,  6,"N"};
   ,"fk_Application"     =>{,  "I",   0,  0,};
   ,"Name"               =>{, "CV", 200,  0,};
   ,"UseStatus"          =>{,  "N",   1,  0,};      // 1 = Unknown, 2 = Proposed, 3 = Under Development, 4 = Active, 5 = To Be Discontinued, 6 = Discontinued _M_ Needed?
   ,"DocStatus"          =>{,  "N",   1,  0,};      // 1 = Missing, 2 = Not Needed, 3 = In Progress, 4 = Complete                             _M_ Needed?
   ,"Description"        =>{,  "M",   0,  0,"N"};   //                                                                                        _M_ Needed?
   ,"NodeDisplayMode"    =>{,  "N",   1,  0,};      // 1 = Table Name and Alias, 2 - Table Alias or Name, 3 - Table Name
   ,"NodeShowDescription"=>{,  "L",   0,  0,};      // True If the table description should be included in the node.
   ,"VisPos"             =>{,  "M",   0,  0,"N"}};  // Last Visualization Positions
   ,;   //Index Definition
   {"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.DiagramTable"=>{;   //Field Definition
   {"pk"        =>{,  "I",   0,  0,};
   ,"sysc"      =>{, "DT",   0,  6,"N"};
   ,"sysm"      =>{, "DT",   0,  6,"N"};
   ,"fk_Diagram"=>{,  "I",   0,  0,};
   ,"fk_Table"  =>{,  "I",   0,  0,}};
   ,;   //Index Definition
   {"fk_Diagram"=>{,"fk_Diagram",.f.,"BTREE"};
   ,"fk_Table"  =>{,"fk_Table"  ,.f.,"BTREE"}}};
,"public.CustomField"=>{;   //Field Definition
   {"pk"                =>{,  "I",   0,  0,};
   ,"sysc"              =>{, "DT",   0,  6,"N"};
   ,"sysm"              =>{, "DT",   0,  6,"N"};
   ,"Code"              =>{, "CV",  10,  0,};
   ,"Name"              =>{, "CV", 200,  0,};     // Must be unique
   ,"Label"             =>{, "CV", 200,  0,};     // Used on Entry screen. Can be the same as long as UsedOn is different or Status is 3.
   ,"Type"              =>{,  "N",   1,  0,};     // 1 - Logical, 2 - Multi Choice, 3 - String, 4 - Text Area, 5 - Date
   ,"OptionDefinition"  =>{,  "M",   0,  0,"N"};  // Used if Type = 2. Row of integer / labels
   ,"Length"            =>{,  "N",   4,  0,"N"};  // Used if Type = 3.
   ,"Width"             =>{,  "N",   3,  0,"N"};  // Used if Type = 4. Width in Characters
   ,"Height"            =>{,  "N",   3,  0,"N"};  // Used if Type = 4. Number of Rows.
   ,"Description"       =>{,  "M",   0,  0,"N"};
   ,"UsedOn"            =>{,  "N",   1,  0,};     // 1 - Application, 2 - Name Space, 3 - Table, 4 - Column
   ,"Status"            =>{,  "N",   1,  0,}};    // 1 = Active, 2 = Inactive (Read Only), 3 = Hidden
   ,;   //Index Definition
   NIL};
,"public.ApplicationCustomField"=>{;   //Field Definition.  To tell if the record is to be used in an application. The Order will also depend of public.CustomField.UsedOn
   {"pk"               =>{,  "I",   0,  0,};
   ,"sysc"             =>{, "DT",   0,  6,"N"};
   ,"sysm"             =>{, "DT",   0,  6,"N"};
   ,"fk_CustomField"   =>{,  "I",   0,  0,};
   ,"fk_Application"   =>{,  "I",   0,  0,};
   ,"Order"            =>{,  "I",   0,  0,}};       // Display Order
   ,;   //Index Definition
   {"fk_CustomField"=>{,"fk_CustomField",.f.,"BTREE"};
   ,"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.CustomFieldValue"=>{;   //Field Definition
   {"pk"            =>{,  "I",   0,  0,};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_CustomField"=>{,  "I",   0,  0,};
   ,"fk_Entity"     =>{,  "I",   0,  0,};       // Will be the foreign key to Application, NameSpace, Table or Column. See value in public.CustomField.UsedOn
   ,"ValueI"        =>{,  "I",   0,  0,"N"};     // Used if public.CustomField.Type = 2
   ,"ValueM"        =>{,  "M",   0,  0,"N"};     // Used if public.CustomField.Type = 3 or 4
   ,"ValueD"        =>{,  "D",   0,  0,"N"}};    // Used if public.CustomField.Type = 5
   ,;   //Index Definition
   {"fk_CustomField" =>{,"fk_CustomField",.f.,"BTREE"};
   ,"fk_Entity"      =>{,"fk_Entity"  ,.f.,"BTREE"}}};
,"public.TableMapping"=>{;   //Field Definition
   {"pk"             =>{,  "I",   0,  0,};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_TableFrom"   =>{,  "I",   0,  0,};
   ,"fk_TableTo"     =>{,  "I",   0,  0,};
   ,"Description"    =>{,  "M",   0,  0,}};   // Text representation of the value
   ,;   //Index Definition
   {"fk_TableFrom"   =>{,"fk_TableFrom" ,.f.,"BTREE"};
   ,"fk_TableTo"     =>{,"fk_TableTo"   ,.f.,"BTREE"}}};
,"public.ColumnMapping"=>{;   //Field Definition
   {"pk"             =>{,  "I",   0,  0,};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_ColumnFrom"  =>{,  "I",   0,  0,};
   ,"fk_ColumnTo"    =>{,  "I",   0,  0,};
   ,"Description"    =>{,  "M",   0,  0,}};   // Text representation of the value
   ,;   //Index Definition
   {"fk_ColumnFrom"   =>{,"fk_ColumnFrom" ,.f.,"BTREE"};
   ,"fk_ColumnTo"     =>{,"fk_ColumnTo"   ,.f.,"BTREE"}}};
,"public.Tag"=>{;   //Field Definition
   {"pk"              =>{,  "I",   0,  0,"+"};
   ,"sysc"            =>{, "DT",   0,  6,"N"};
   ,"sysm"            =>{, "DT",   0,  6,"N"};
   ,"fk_Application"  =>{,  "I",   0,  0,};
   ,"Code"            =>{, "CV",  10,  0,};
   ,"Name"            =>{, "CV", 100,  0,};
   ,"TableUseStatus"  =>{,  "N",   1,  0,};     // 1 = Do Not Use, 2 = Active, 3 = Discontinued
   ,"ColumnUseStatus" =>{,  "N",   1,  0,};     // 1 = Do Not Use, 2 = Active, 3 = Discontinued
   ,"Description"     =>{,  "M",   0,  0,"N"}};
   ,;   //Index Definition
   {"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.TagTable"=>{;   //Field Definition
   {"pk"       =>{,  "I",   0,  0,};
   ,"sysc"     =>{, "DT",   0,  6,"N"};
   ,"sysm"     =>{, "DT",   0,  6,"N"};
   ,"fk_Tag"   =>{,  "I",   0,  0,};
   ,"fk_Table" =>{,  "I",   0,  0,}};
   ,;   //Index Definition
   {"fk_Tag"   =>{,"fk_Tag"  ,.f.,"BTREE"};
   ,"fk_Table" =>{,"fk_Table",.f.,"BTREE"}}};
,"public.TagColumn"=>{;   //Field Definition
   {"pk"        =>{,  "I",   0,  0,};
   ,"sysc"      =>{, "DT",   0,  6,"N"};
   ,"sysm"      =>{, "DT",   0,  6,"N"};
   ,"fk_Tag"    =>{,  "I",   0,  0,};
   ,"fk_Column" =>{,  "I",   0,  0,}};
   ,;   //Index Definition
   {"fk_Tag"    =>{,"fk_Tag"   ,.f.,"BTREE"};
   ,"fk_Column" =>{,"fk_Column",.f.,"BTREE"}}};
,"public.Model"=>{;   //Field Definition
   {"pk"              =>{,  "I",   0,  0,"+"};
   ,"sysc"            =>{, "DT",   0,  6,"N"};
   ,"sysm"            =>{, "DT",   0,  6,"N"};
   ,"fk_Application"  =>{,  "I",   0,  0,};
   ,"LinkUID"         =>{,  "C",  36,  0,};     // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"            =>{, "CV", 100,  0,};     // Inique in application
   ,"UseStatus"       =>{,  "N",   1,  0,};     // 1 = Proposed, 2 = Draft, 3 = Beta, 4 = Stable, 5 = In Use, 6 = Obsolete
   ,"Description"     =>{,  "M",   0,  0,"N"}};
   ,;   //Index Definition
   {"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.Package"=>{;   //Field Definition
   {"pk"        =>{,  "I",   0,  0,};
   ,"sysc"      =>{, "DT",   0,  6,"N"};
   ,"sysm"      =>{, "DT",   0,  6,"N"};
   ,"fk_Package"=>{,  "I",   0,  0,};
   ,"fk_Model"  =>{,  "I",   0,  0,};
   ,"LinkUID"   =>{,  "C",  36,  0,};     // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"      =>{, "CV", 200,  0,};
   ,"FullName"  =>{,  "M",   0,  0,}};    // Denormalized sum of all the parent name. Inique in Model.
   ,;   //Index Definition
   {"fk_Package"=>{,"fk_Package",.f.,"BTREE"};
   ,"fk_Model"  =>{,"fk_Model"  ,.f.,"BTREE"}}};
,"public.Entity"=>{;   //Field Definition
   {"pk"              =>{,  "I",   0,  0,"+"};
   ,"sysc"            =>{, "DT",   0,  6,"N"};
   ,"sysm"            =>{, "DT",   0,  6,"N"};
   ,"fk_Package"      =>{,  "I",   0,  0,};
   ,"LinkUID"         =>{,  "C",  36,  0,};     // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"            =>{, "CV", 200,  0,};
   ,"Description"     =>{,  "M",   0,  0,"N"};   // AKA Definition
   ,"Scope"           =>{,  "M",   0,  0,"N"}};  // should support mark down (md)
   ,;   //Index Definition
   {"fk_Package"=>{,"fk_Package",.f.,"BTREE"}}};
,"public.Association"=>{;   //Field Definition
   {"pk"               =>{,  "I",   0,  0,"+"};
   ,"sysc"             =>{, "DT",   0,  6,"N"};
   ,"sysm"             =>{, "DT",   0,  6,"N"};
   ,"fk_Package"       =>{,  "I",   0,  0,};
   ,"LinkUID"          =>{,  "C",  36,  0,};     // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"             =>{, "CV", 200,  0,};     // Display in the middle of the association representation
   ,"NumberOfEndpoints"=>{,  "N",   2,  0,};     // Must more than 1 and less than 99. This will assist in visualization
   ,"Description"      =>{,  "M",   0,  0,"N"}}; // Meaning of the association. Display when clicking on the assiciation
   ,;   //Index Definition
   {"fk_Package"=>{,"fk_Package",.f.,"BTREE"}}};
,"public.AssociationEnd"=>{;   //Field Definition
   {"pk"            =>{,  "I",   0,  0,};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Entity"     =>{,  "I",   0,  0,};
   ,"fk_Association"=>{,  "I",   0,  0,};
   ,"Name"          =>{, "CV", 200,  0,};       // Showing near the entity in a representation
   ,"BoundLower"    =>{,  "I",   0,  0,"N"};       
   ,"BoundUpper"    =>{,  "I",   0,  0,"N"};       
   ,"Description"   =>{,  "M",   0,  0,}};      // _M_ not certain if needed
   ,;   //Index Definition
   {"fk_Entity"     =>{,"fk_Entity"     ,.f.,"BTREE"};
   ,"fk_Association"=>{,"fk_Association",.f.,"BTREE"}}};
,"public.Property"=>{;   //Field Definition   should not include foreign keys.
   {"pk"            =>{,  "I",   0,  0,"+"};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Entity"     =>{,  "I",   0,  0,};
   ,"fk_Association"=>{,  "I",   0,  0,};
   ,"fk_DataType"   =>{,  "I",   0,  0,};
   ,"LinkUID"       =>{,  "C",  36,  0,};     // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"          =>{, "CV", 200,  0,};
   ,"BoundLower"    =>{,  "I",   0,  0,"N"};       
   ,"BoundUpper"    =>{,  "I",   0,  0,"N"};       
   ,"Description"   =>{,  "M",   0,  0,"N"}};     // 1 = All Servers, 2 = MySQL Only, 3 = PostgreSQL Only
   ,;   //Index Definition
   {"fk_Entity"      =>{,"fk_Entity"      ,.f.,"BTREE"};
   ,"fk_Association" =>{,"fk_Association" ,.f.,"BTREE"};
   ,"fk_DataType"    =>{,"fk_DataType"    ,.f.,"BTREE"}}};
,"public.DataType"=>{;   //Field Definition   should not include foreign keys.
   {"pk"         =>{,  "I",   0,  0,"+"};
   ,"sysc"       =>{, "DT",   0,  6,"N"};
   ,"sysm"       =>{, "DT",   0,  6,"N"};
   ,"fk_DataType"=>{,  "I",   0,  0,};
   ,"fk_Model"   =>{,  "I",   0,  0,};
   ,"LinkUID"    =>{,  "C",  36,  0,};     // Used to create direct link, Is a UUID generated by calling postgresql "select gen_random_uuid()"
   ,"Name"       =>{, "CV", 200,  0,};
   ,"Description"=>{,  "M",   0,  0,"N"}};     // 1 = All Servers, 2 = MySQL Only, 3 = PostgreSQL Only
   ,;   //Index Definition
   {"fk_DataType"=>{,"fk_DataType",.f.,"BTREE"};
   ,"fk_Model"   =>{,"fk_Model"   ,.f.,"BTREE"}}};
,"public.AssociationTableMapping"=>{;   //Field Definition
   {"pk"            =>{,  "I",   0,  0,};
   ,"sysc"          =>{, "DT",   0,  6,"N"};
   ,"sysm"          =>{, "DT",   0,  6,"N"};
   ,"fk_Association"=>{,  "I",   0,  0,};
   ,"fk_Table"      =>{,  "I",   0,  0,}};   // Text representation of the value
   ,;   //Index Definition
   {"fk_Association"=>{,"fk_Association",.f.,"BTREE"};
   ,"fk_Table"      =>{,"fk_Table"      ,.f.,"BTREE"}}};
,"public.EntityTableMapping"=>{;   //Field Definition
   {"pk"       =>{,  "I",   0,  0,};
   ,"sysc"     =>{, "DT",   0,  6,"N"};
   ,"sysm"     =>{, "DT",   0,  6,"N"};
   ,"fk_Entity"=>{,  "I",   0,  0,};
   ,"fk_Table" =>{,  "I",   0,  0,}};   // Text representation of the value
   ,;   //Index Definition
   {"fk_Entity"=>{,"fk_Entity",.f.,"BTREE"};
   ,"fk_Table" =>{,"fk_Table" ,.f.,"BTREE"}}};
,"public.PropertyColumnMapping"=>{;   //Field Definition
   {"pk"         =>{,  "I",   0,  0,};
   ,"sysc"       =>{, "DT",   0,  6,"N"};
   ,"sysm"       =>{, "DT",   0,  6,"N"};
   ,"fk_Property"=>{,  "I",   0,  0,};
   ,"fk_Column"  =>{,  "I",   0,  0,}};   // Text representation of the value
   ,;   //Index Definition
   {"fk_Property"=>{,"fk_Property",.f.,"BTREE"};
   ,"fk_Column"  =>{,"fk_Column"  ,.f.,"BTREE"}}};
,"public.ConceptualDiagram"=>{;   //Field Definition
   {"pk"                 =>{,  "I",   0,  0,"+"};
   ,"sysc"               =>{, "DT",   0,  6,"N"};
   ,"sysm"               =>{, "DT",   0,  6,"N"};
   ,"fk_Model"           =>{,  "I",   0,  0,};
   ,"Name"               =>{, "CV", 200,  0,};
   ,"NodeShowDescription"=>{,  "L",   0,  0,};      // True If the node description should be included.
   ,"VisPos"             =>{,  "M",   0,  0,"N"}};  // Last Visualization Positions
   ,;   //Index Definition
   {"fk_Model"=>{,"fk_Model",.f.,"BTREE"}}};
,"public.DiagramEntity"=>{;   //Field Definition
   {"pk"                  =>{,  "I",   0,  0,};
   ,"sysc"                =>{, "DT",   0,  6,"N"};
   ,"sysm"                =>{, "DT",   0,  6,"N"};
   ,"fk_ConceptualDiagram"=>{,  "I",   0,  0,};
   ,"fk_Entity"           =>{,  "I",   0,  0,}};
   ,;   //Index Definition
   {"fk_ConceptualDiagram"=>{,"fk_ConceptualDiagram",.f.,"BTREE"};
   ,"fk_Entity"           =>{,"fk_Entity"           ,.f.,"BTREE"}}};
,"public.User"=>{;   //Field Definition
   {"pk"          =>{,  "I",   0,  0,};
   ,"sysc"        =>{, "DT",   0,  6,"N"};
   ,"sysm"        =>{, "DT",   0,  6,"N"};
   ,"id"          =>{, "CV",  20,  0,};
   ,"Password"    =>{, "CV", 200,  0,"N"};   // Allow Nul so to set a password to default.
   ,"FirstName"   =>{, "CV", 200,  0,};
   ,"LastName"    =>{, "CV", 200,  0,};
   ,"AccessMode"  =>{,  "N",   1,  0,};    // 1 = Application Specific, 2 = All Application Read Only, 3 = All Application Full Access, 4 = Root Admin (User Control)
   ,"Status"      =>{,  "N",   1,  0,};    // 1 = Active, 2 = Inactive
   ,"Description" =>{,  "M",   0,  0,"N"}};
   ,;   //Index Definition
   NIL};
,"public.UserAccessApplication"=>{;   //Field Definition
   {"pk"             =>{,  "I",   0,  0,};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_User"        =>{,  "I",   0,  0,};
   ,"fk_Application" =>{,  "I",   0,  0,};
   ,"AccessLevel"    =>{,  "N",   1,  0,}};     // 1 - None,2 - Read Only,3 - Edit Description and Information Entries,4 - Edit Description and Information Entries and Diagrams,5 - Edit Anything,6 - Edit Anything and Load/Sync Schema,7 - Full Access
   ,;   //Index Definition
   {"fk_User"       =>{,"fk_User" ,.f.,"BTREE"};
   ,"fk_Application"=>{,"fk_Application",.f.,"BTREE"}}};
,"public.UserSetting"=>{;   //Field Definition
   {"pk"             =>{,  "I",   0,  0,};
   ,"sysc"           =>{, "DT",   0,  6,"N"};
   ,"sysm"           =>{, "DT",   0,  6,"N"};
   ,"fk_User"        =>{,  "I",   0,  0,};
   ,"KeyC"           =>{,  "C", 100,  0,};    // Any Text that will be know in the app
   ,"ValueC"         =>{,  "M",   0,  0,}};   // Text representation of the value
   ,;   //Index Definition
   {"fk_User"       =>{,"fk_User" ,.f.,"BTREE"};
   ,"KeyC"          =>{,"KeyC"    ,.f.,"BTREE"}}};
,"public.LoginLogs"=>{;   //Field Definition
   {"pk"          =>{,  "I",   0,  0,};
   ,"sysc"        =>{, "DT",   0,  6,"N"};
   ,"sysm"        =>{, "DT",   0,  6,"N"};
   ,"fk_User"     =>{,  "I",   0,  0,};
   ,"TimeIn"      =>{, "DT",   0,  2,};
   ,"TimeOut"     =>{, "DT",   0,  2,"N"};
   ,"IP"          =>{, "CV",  45,  0,};
   ,"Signature"   =>{, "CV",  50,  0,};     //Used To Verify the who is logged in
   ,"Attempts"    =>{,  "I",   0,  0,};
   ,"Status"      =>{,  "N",   1,  0,}};    // 1 = Logged In, 2 = User Logout, 3 = Implicit Logout
   ,;   //Index Definition
   {"fk_User"=>{,"fk_User",.f.,"BTREE"}}};
} 