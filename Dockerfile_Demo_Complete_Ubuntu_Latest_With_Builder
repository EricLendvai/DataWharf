FROM ubuntu:latest AS builder

## for apt to be noninteractive
ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true

# Used by running apps to detect if inside a docker container. Testing for existence of /.dockerenv may not always work.
ENV InDocker=True

RUN apt-get update && apt-get install -y apt-utils

RUN apt-get install -y \
        libfcgi-dev \
        libapache2-mod-fcgid \
        git \
        build-essential \
        unixodbc-dev \
        apache2 \
        libgpm2 \
        gnupg \
        wget \
        psmisc \
        libcurl4-openssl-dev

RUN apt-get update && apt-get -y upgrade

# Had to run the following dependency install separatly
RUN apt-get install -y libssl-dev

# install Postgresql odbc driver
RUN apt-get -y install odbc-postgresql

# "ADD https://api.github.com/repos/...." Logic to help avoid cache on git clone commands

# install harbour from src
RUN mkdir /src
WORKDIR /src
ADD https://api.github.com/repos/harbour/core/git/refs/heads/master RepoVersionHarbourCore.json
RUN git clone --branch master https://github.com/harbour/core.git harbour
WORKDIR /src/harbour

ENV HB_WITH_CURL=/usr/include/x86_64-linux-gnu/
ENV HB_WITH_OPENSSL=/usr/include/openssl/

# Will request the make app to use up to 8 core.
RUN make -j 8 install

#To fix symlinks
RUN ldconfig

# Make some additional supporting libs
WORKDIR /src

ADD https://api.github.com/repos/EricLendvai/Harbour_FastCGI/git/refs/heads/main RepoVersionHarbour_FastCGI.json
RUN git clone https://github.com/EricLendvai/Harbour_FastCGI/

ADD https://api.github.com/repos/EricLendvai/Harbour_EL/git/refs/heads/main RepoVersionHarbour_EL.json
RUN git clone https://github.com/EricLendvai/Harbour_EL/

ADD https://api.github.com/repos/EricLendvai/Harbour_ORM/git/refs/heads/main RepoVersionHarbour_ORM.json
RUN git clone https://github.com/EricLendvai/Harbour_ORM/

#Will be used for future web apps builds and when building hb_orm
ENV HB_EL_ROOT /src/Harbour_EL
ENV HB_ORM_ROOT /src/Harbour_ORM
ENV HB_FASTCGI_ROOT /src/Harbour_FastCGI

ENV HB_COMPILER gcc

ENV BuildMode release

WORKDIR /src/Harbour_EL
RUN chmod +x ./BuildLIB.sh
ENV LIBName hb_el
RUN ./BuildLIB.sh

WORKDIR /src/Harbour_ORM
RUN chmod +x ./BuildLIB.sh
ENV LIBName hb_orm
RUN ./BuildLIB.sh

#also build debug libraries
ENV BuildMode debug

WORKDIR /src/Harbour_EL
ENV LIBName hb_el
RUN ./BuildLIB.sh

WORKDIR /src/Harbour_ORM
ENV LIBName hb_orm
RUN ./BuildLIB.sh


WORKDIR /src

ADD https://api.github.com/repos/EricLendvai/DataWharf/git/refs/heads/main RepoVersionDataWharf.json
RUN git clone https://github.com/EricLendvai/DataWharf.git

ENV HB_COMPILER gcc

# Build DataWharf
WORKDIR /src/DataWharf
RUN mkdir -p build/lin64/gcc/release/
ENV EXEName DataWharf
ENV BuildMode release
ENV SiteRootFolder /var/www/Harbour_websites/fcgi_DataWharf/
RUN chmod +x ./BuildEXE.sh
RUN ./BuildEXE.sh

# ----------------------------------------------------------------------------------------------
FROM ubuntu:latest

## for apt to be noninteractive
ENV DEBIAN_FRONTEND noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN true

# Used by running apps to detect if inside a docker container. Testing for existence of /.dockerenv may not always work.
ENV InDocker=True

RUN apt-get update && apt-get install -y apt-utils

RUN apt-get install -y \
        libfcgi-dev \
        libapache2-mod-fcgid \
        git \
        build-essential \
        unixodbc-dev \
        apache2 \
        libgpm2 \
        gnupg \
        wget \
        psmisc \
        libcurl4-openssl-dev

RUN apt-get update && apt-get -y upgrade

# Had to run the following dependency install separatly
RUN apt-get install -y libssl-dev

# install Postgresql odbc driver
RUN apt-get -y install odbc-postgresql

RUN a2enmod rewrite
RUN mkdir -p /var/www/Harbour_websites/fcgi_DataWharf/apache-logs/

ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR /var/log/apache2
ENV APACHE_LOCK_DIR /var/lock/apache2
ENV APACHE_PID_FILE /var/run/apache2.pid

COPY ./FilesForPublishedWebsites/LinuxApache2/DataWharf.conf /etc/apache2/sites-enabled/000-default.conf

RUN mkdir -p /var/www/Harbour_websites/fcgi_DataWharf/backend/
COPY ./config_demo.txt /var/www/Harbour_websites/fcgi_DataWharf/backend/config.txt

#RUN cp /src/DataWharf/build/lin64/gcc/release/DataWharf.exe /var/www/Harbour_websites/fcgi_DataWharf/backend/FCGIDataWharf.exe
COPY --from=builder /src/DataWharf/build/lin64/gcc/release/DataWharf.exe /var/www/Harbour_websites/fcgi_DataWharf/backend/FCGIDataWharf.exe

COPY ./FilesForPublishedWebsites/website /var/www/Harbour_websites/fcgi_DataWharf/website

RUN chown -R www-data:www-data /var/www/Harbour_websites


# To make it possible to Delta/Load Datadictionary install additional ODBC drivers
RUN apt-get -y install curl

# Install MSSQL odbc driver
WORKDIR ~
RUN apt-get update && apt-get install -y lsb-release && apt-get clean all
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
RUN curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list > /etc/apt/sources.list.d/mssql-release.list
RUN apt-get update
RUN ACCEPT_EULA=Y apt-get install -y msodbcsql18
#RUN echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
ENV PATH="${PATH}:/opt/mssql-tools18/bin"


# Install mariadb odbc driver
RUN apt-get -y install odbc-mariadb

# Install MySQL odbc driver
WORKDIR /etc
RUN rm -f ./mysql-community-client-plugins.deb
RUN wget -O ./mysql-community-client-plugins.deb  https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-community-client-plugins_8.0.33-1ubuntu22.04_amd64.deb
RUN apt install ./mysql-community-client-plugins.deb
RUN rm -f ./mysqlodbc.deb
RUN wget -O ./mysqlodbc.deb https://dev.mysql.com/get/Downloads/Connector-ODBC/8.0/mysql-connector-odbc_8.0.33-1ubuntu22.04_amd64.deb
RUN apt install ./mysqlodbc.deb

# Install Oracle instant client and odbc driver (client is a dependency of the odbc driver)
WORKDIR /etc
RUN rm -f ./oracle-instantclient-basiclite.rpm
RUN apt-get install -y libaio1 alien
RUN wget -O ./oracle-instantclient-basiclite.rpm https://download.oracle.com/otn_software/linux/instantclient/2340000/oracle-instantclient-basiclite-23.4.0.24.05-1.el9.x86_64.rpm
RUN alien -i --scripts oracle-instantclient-basiclite.rpm
#RUN rm -f oracle-instantclient-basiclite.rpm
ENV LD_LIBRARY_PATH="/usr/lib/oracle/23/client64/lib:${LD_LIBRARY_PATH}"
RUN rm -f ./oracle-instantclient-odbc.rpm
RUN wget -O ./oracle-instantclient-odbc.rpm https://download.oracle.com/otn_software/linux/instantclient/2340000/oracle-instantclient-odbc-23.4.0.24.05-1.el9.x86_64.rpm
RUN alien -i --scripts oracle-instantclient-odbc.rpm
RUN /usr/lib/oracle/23/client64/bin/odbc_update_ini.sh "/" "/usr/lib/oracle/23/client64/lib" "Oracle"
#RUN /etc/init.d/apache2 restart


EXPOSE 80 

CMD apache2ctl start & sleep infinity
